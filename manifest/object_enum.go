// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.6
// Revision: 97611fddaa414f53713597918c5e954646cb8623
// Build Date: 2023-03-26T21:38:06Z
// Built By: goreleaser

package manifest

import (
	"fmt"
	"strings"
)

const (
	// RawObjectFormatJSON is a RawObjectFormat of type JSON.
	RawObjectFormatJSON RawObjectFormat = iota + 1
	// RawObjectFormatYAML is a RawObjectFormat of type YAML.
	RawObjectFormatYAML
)

var ErrInvalidRawObjectFormat = fmt.Errorf("not a valid RawObjectFormat, try [%s]", strings.Join(_RawObjectFormatNames, ", "))

const _RawObjectFormatName = "JSONYAML"

var _RawObjectFormatNames = []string{
	_RawObjectFormatName[0:4],
	_RawObjectFormatName[4:8],
}

// RawObjectFormatNames returns a list of possible string values of RawObjectFormat.
func RawObjectFormatNames() []string {
	tmp := make([]string, len(_RawObjectFormatNames))
	copy(tmp, _RawObjectFormatNames)
	return tmp
}

var _RawObjectFormatMap = map[RawObjectFormat]string{
	RawObjectFormatJSON: _RawObjectFormatName[0:4],
	RawObjectFormatYAML: _RawObjectFormatName[4:8],
}

// String implements the Stringer interface.
func (x RawObjectFormat) String() string {
	if str, ok := _RawObjectFormatMap[x]; ok {
		return str
	}
	return fmt.Sprintf("RawObjectFormat(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x RawObjectFormat) IsValid() bool {
	_, ok := _RawObjectFormatMap[x]
	return ok
}

var _RawObjectFormatValue = map[string]RawObjectFormat{
	_RawObjectFormatName[0:4]: RawObjectFormatJSON,
	_RawObjectFormatName[4:8]: RawObjectFormatYAML,
}

// ParseRawObjectFormat attempts to convert a string to a RawObjectFormat.
func ParseRawObjectFormat(name string) (RawObjectFormat, error) {
	if x, ok := _RawObjectFormatValue[name]; ok {
		return x, nil
	}
	return RawObjectFormat(0), fmt.Errorf("%s is %w", name, ErrInvalidRawObjectFormat)
}
