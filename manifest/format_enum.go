// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.6
// Revision: 97611fddaa414f53713597918c5e954646cb8623
// Build Date: 2023-03-26T21:38:06Z
// Built By: goreleaser

package manifest

import (
	"fmt"
	"strings"
)

const (
	// ObjectFormatJSON is a ObjectFormat of type JSON.
	ObjectFormatJSON ObjectFormat = iota + 1
	// ObjectFormatYAML is a ObjectFormat of type YAML.
	ObjectFormatYAML
)

var ErrInvalidObjectFormat = fmt.Errorf("not a valid ObjectFormat, try [%s]", strings.Join(_ObjectFormatNames, ", "))

const _ObjectFormatName = "JSONYAML"

var _ObjectFormatNames = []string{
	_ObjectFormatName[0:4],
	_ObjectFormatName[4:8],
}

// ObjectFormatNames returns a list of possible string values of ObjectFormat.
func ObjectFormatNames() []string {
	tmp := make([]string, len(_ObjectFormatNames))
	copy(tmp, _ObjectFormatNames)
	return tmp
}

var _ObjectFormatMap = map[ObjectFormat]string{
	ObjectFormatJSON: _ObjectFormatName[0:4],
	ObjectFormatYAML: _ObjectFormatName[4:8],
}

// String implements the Stringer interface.
func (x ObjectFormat) String() string {
	if str, ok := _ObjectFormatMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ObjectFormat(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ObjectFormat) IsValid() bool {
	_, ok := _ObjectFormatMap[x]
	return ok
}

var _ObjectFormatValue = map[string]ObjectFormat{
	_ObjectFormatName[0:4]:                  ObjectFormatJSON,
	strings.ToLower(_ObjectFormatName[0:4]): ObjectFormatJSON,
	_ObjectFormatName[4:8]:                  ObjectFormatYAML,
	strings.ToLower(_ObjectFormatName[4:8]): ObjectFormatYAML,
}

// ParseObjectFormat attempts to convert a string to a ObjectFormat.
func ParseObjectFormat(name string) (ObjectFormat, error) {
	if x, ok := _ObjectFormatValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _ObjectFormatValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return ObjectFormat(0), fmt.Errorf("%s is %w", name, ErrInvalidObjectFormat)
}
