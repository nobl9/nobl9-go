// Code generated by go-enum DO NOT EDIT.
// Version: 0.7.0
// Revision: 0979fc7bd6297900cf7c4b903f1d4b0d174537c7
// Build Date: 2025-06-17T15:19:50Z
// Built By: goreleaser

package manifest

import (
	"fmt"
	"strings"
)

const (
	// VersionV1alpha is a Version of type v1alpha.
	VersionV1alpha Version = "n9/v1alpha"
)

var ErrInvalidVersion = fmt.Errorf("not a valid Version, try [%s]", strings.Join(_VersionNames, ", "))

var _VersionNames = []string{
	string(VersionV1alpha),
}

// VersionNames returns a list of possible string values of Version.
func VersionNames() []string {
	tmp := make([]string, len(_VersionNames))
	copy(tmp, _VersionNames)
	return tmp
}

// VersionValues returns a list of the values for Version
func VersionValues() []Version {
	return []Version{
		VersionV1alpha,
	}
}

// String implements the Stringer interface.
func (x Version) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Version) IsValid() bool {
	_, err := ParseVersion(string(x))
	return err == nil
}

var _VersionValue = map[string]Version{
	"n9/v1alpha": VersionV1alpha,
}

// ParseVersion attempts to convert a string to a Version.
func ParseVersion(name string) (Version, error) {
	if x, ok := _VersionValue[name]; ok {
		return x, nil
	}
	return Version(""), fmt.Errorf("%s is %w", name, ErrInvalidVersion)
}

// MarshalText implements the text marshaller method.
func (x Version) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Version) UnmarshalText(text []byte) error {
	tmp, err := ParseVersion(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
