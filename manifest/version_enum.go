// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.6
// Revision: 97611fddaa414f53713597918c5e954646cb8623
// Build Date: 2023-03-26T21:38:06Z
// Built By: goreleaser

package manifest

import (
	"fmt"
	"strings"
)

const (
	// VersionV1alpha is a Version of type V1alpha.
	VersionV1alpha Version = iota
)

var ErrInvalidVersion = fmt.Errorf("not a valid Version, try [%s]", strings.Join(_VersionNames, ", "))

const _VersionName = "v1alpha"

var _VersionNames = []string{
	_VersionName[0:7],
}

// VersionNames returns a list of possible string values of Version.
func VersionNames() []string {
	tmp := make([]string, len(_VersionNames))
	copy(tmp, _VersionNames)
	return tmp
}

// VersionValues returns a list of the values for Version
func VersionValues() []Version {
	return []Version{
		VersionV1alpha,
	}
}

var _VersionMap = map[Version]string{
	VersionV1alpha: _VersionName[0:7],
}

// String implements the Stringer interface.
func (x Version) String() string {
	if str, ok := _VersionMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Version(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Version) IsValid() bool {
	_, ok := _VersionMap[x]
	return ok
}

var _VersionValue = map[string]Version{
	_VersionName[0:7]: VersionV1alpha,
}

// ParseVersion attempts to convert a string to a Version.
func ParseVersion(name string) (Version, error) {
	if x, ok := _VersionValue[name]; ok {
		return x, nil
	}
	return Version(0), fmt.Errorf("%s is %w", name, ErrInvalidVersion)
}
