// Code generated by go-enum DO NOT EDIT.
// Version: 0.7.0
// Revision: 0979fc7bd6297900cf7c4b903f1d4b0d174537c7
// Build Date: 2025-06-17T15:19:50Z
// Built By: goreleaser

package v1alpha

import (
	"fmt"

	"github.com/pkg/errors"
)

const (
	// Prometheus is a DataSourceType of type Prometheus.
	Prometheus DataSourceType = iota + 1
	// Datadog is a DataSourceType of type Datadog.
	Datadog
	// NewRelic is a DataSourceType of type NewRelic.
	NewRelic
	// AppDynamics is a DataSourceType of type AppDynamics.
	AppDynamics
	// Splunk is a DataSourceType of type Splunk.
	Splunk
	// Lightstep is a DataSourceType of type Lightstep.
	Lightstep
	// SplunkObservability is a DataSourceType of type SplunkObservability.
	SplunkObservability
	// Dynatrace is a DataSourceType of type Dynatrace.
	Dynatrace
	// ThousandEyes is a DataSourceType of type ThousandEyes.
	ThousandEyes
	// Graphite is a DataSourceType of type Graphite.
	Graphite
	// BigQuery is a DataSourceType of type BigQuery.
	BigQuery
	// Elasticsearch is a DataSourceType of type Elasticsearch.
	Elasticsearch
	// OpenTSDB is a DataSourceType of type OpenTSDB.
	OpenTSDB
	// GrafanaLoki is a DataSourceType of type GrafanaLoki.
	GrafanaLoki
	// CloudWatch is a DataSourceType of type CloudWatch.
	CloudWatch
	// Pingdom is a DataSourceType of type Pingdom.
	Pingdom
	// AmazonPrometheus is a DataSourceType of type AmazonPrometheus.
	AmazonPrometheus
	// Redshift is a DataSourceType of type Redshift.
	Redshift
	// SumoLogic is a DataSourceType of type SumoLogic.
	SumoLogic
	// Instana is a DataSourceType of type Instana.
	Instana
	// InfluxDB is a DataSourceType of type InfluxDB.
	InfluxDB
	// GoogleCloudMonitoring is a DataSourceType of type GoogleCloudMonitoring.
	GoogleCloudMonitoring
	// AzureMonitor is a DataSourceType of type AzureMonitor.
	AzureMonitor
	// Generic is a DataSourceType of type Generic.
	Generic
	// Honeycomb is a DataSourceType of type Honeycomb.
	Honeycomb
	// LogicMonitor is a DataSourceType of type LogicMonitor.
	LogicMonitor
	// AzurePrometheus is a DataSourceType of type AzurePrometheus.
	AzurePrometheus
	// Coralogix is a DataSourceType of type Coralogix.
	Coralogix
)

var ErrInvalidDataSourceType = errors.New("not a valid DataSourceType")

const _DataSourceTypeName = "PrometheusDatadogNewRelicAppDynamicsSplunkLightstepSplunkObservabilityDynatraceThousandEyesGraphiteBigQueryElasticsearchOpenTSDBGrafanaLokiCloudWatchPingdomAmazonPrometheusRedshiftSumoLogicInstanaInfluxDBGoogleCloudMonitoringAzureMonitorGenericHoneycombLogicMonitorAzurePrometheusCoralogix"

// DataSourceTypeValues returns a list of the values for DataSourceType
func DataSourceTypeValues() []DataSourceType {
	return []DataSourceType{
		Prometheus,
		Datadog,
		NewRelic,
		AppDynamics,
		Splunk,
		Lightstep,
		SplunkObservability,
		Dynatrace,
		ThousandEyes,
		Graphite,
		BigQuery,
		Elasticsearch,
		OpenTSDB,
		GrafanaLoki,
		CloudWatch,
		Pingdom,
		AmazonPrometheus,
		Redshift,
		SumoLogic,
		Instana,
		InfluxDB,
		GoogleCloudMonitoring,
		AzureMonitor,
		Generic,
		Honeycomb,
		LogicMonitor,
		AzurePrometheus,
		Coralogix,
	}
}

var _DataSourceTypeMap = map[DataSourceType]string{
	Prometheus:            _DataSourceTypeName[0:10],
	Datadog:               _DataSourceTypeName[10:17],
	NewRelic:              _DataSourceTypeName[17:25],
	AppDynamics:           _DataSourceTypeName[25:36],
	Splunk:                _DataSourceTypeName[36:42],
	Lightstep:             _DataSourceTypeName[42:51],
	SplunkObservability:   _DataSourceTypeName[51:70],
	Dynatrace:             _DataSourceTypeName[70:79],
	ThousandEyes:          _DataSourceTypeName[79:91],
	Graphite:              _DataSourceTypeName[91:99],
	BigQuery:              _DataSourceTypeName[99:107],
	Elasticsearch:         _DataSourceTypeName[107:120],
	OpenTSDB:              _DataSourceTypeName[120:128],
	GrafanaLoki:           _DataSourceTypeName[128:139],
	CloudWatch:            _DataSourceTypeName[139:149],
	Pingdom:               _DataSourceTypeName[149:156],
	AmazonPrometheus:      _DataSourceTypeName[156:172],
	Redshift:              _DataSourceTypeName[172:180],
	SumoLogic:             _DataSourceTypeName[180:189],
	Instana:               _DataSourceTypeName[189:196],
	InfluxDB:              _DataSourceTypeName[196:204],
	GoogleCloudMonitoring: _DataSourceTypeName[204:225],
	AzureMonitor:          _DataSourceTypeName[225:237],
	Generic:               _DataSourceTypeName[237:244],
	Honeycomb:             _DataSourceTypeName[244:253],
	LogicMonitor:          _DataSourceTypeName[253:265],
	AzurePrometheus:       _DataSourceTypeName[265:280],
	Coralogix:             _DataSourceTypeName[280:289],
}

// String implements the Stringer interface.
func (x DataSourceType) String() string {
	if str, ok := _DataSourceTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DataSourceType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x DataSourceType) IsValid() bool {
	_, ok := _DataSourceTypeMap[x]
	return ok
}

var _DataSourceTypeValue = map[string]DataSourceType{
	_DataSourceTypeName[0:10]:    Prometheus,
	_DataSourceTypeName[10:17]:   Datadog,
	_DataSourceTypeName[17:25]:   NewRelic,
	_DataSourceTypeName[25:36]:   AppDynamics,
	_DataSourceTypeName[36:42]:   Splunk,
	_DataSourceTypeName[42:51]:   Lightstep,
	_DataSourceTypeName[51:70]:   SplunkObservability,
	_DataSourceTypeName[70:79]:   Dynatrace,
	_DataSourceTypeName[79:91]:   ThousandEyes,
	_DataSourceTypeName[91:99]:   Graphite,
	_DataSourceTypeName[99:107]:  BigQuery,
	_DataSourceTypeName[107:120]: Elasticsearch,
	_DataSourceTypeName[120:128]: OpenTSDB,
	_DataSourceTypeName[128:139]: GrafanaLoki,
	_DataSourceTypeName[139:149]: CloudWatch,
	_DataSourceTypeName[149:156]: Pingdom,
	_DataSourceTypeName[156:172]: AmazonPrometheus,
	_DataSourceTypeName[172:180]: Redshift,
	_DataSourceTypeName[180:189]: SumoLogic,
	_DataSourceTypeName[189:196]: Instana,
	_DataSourceTypeName[196:204]: InfluxDB,
	_DataSourceTypeName[204:225]: GoogleCloudMonitoring,
	_DataSourceTypeName[225:237]: AzureMonitor,
	_DataSourceTypeName[237:244]: Generic,
	_DataSourceTypeName[244:253]: Honeycomb,
	_DataSourceTypeName[253:265]: LogicMonitor,
	_DataSourceTypeName[265:280]: AzurePrometheus,
	_DataSourceTypeName[280:289]: Coralogix,
}

// ParseDataSourceType attempts to convert a string to a DataSourceType.
func ParseDataSourceType(name string) (DataSourceType, error) {
	if x, ok := _DataSourceTypeValue[name]; ok {
		return x, nil
	}
	return DataSourceType(0), fmt.Errorf("%s is %w", name, ErrInvalidDataSourceType)
}
