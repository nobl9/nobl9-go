// Code generated by go-enum DO NOT EDIT.
// Version: 0.7.0
// Revision: 0979fc7bd6297900cf7c4b903f1d4b0d174537c7
// Build Date: 2025-06-17T15:19:50Z
// Built By: goreleaser

package slo

import (
	"fmt"
	"strings"
)

const (
	// WhenDelayedCountAsGood is a WhenDelayed of type CountAsGood.
	WhenDelayedCountAsGood WhenDelayed = "CountAsGood"
	// WhenDelayedCountAsBad is a WhenDelayed of type CountAsBad.
	WhenDelayedCountAsBad WhenDelayed = "CountAsBad"
	// WhenDelayedIgnore is a WhenDelayed of type Ignore.
	WhenDelayedIgnore WhenDelayed = "Ignore"
)

var ErrInvalidWhenDelayed = fmt.Errorf("not a valid WhenDelayed, try [%s]", strings.Join(_WhenDelayedNames, ", "))

var _WhenDelayedNames = []string{
	string(WhenDelayedCountAsGood),
	string(WhenDelayedCountAsBad),
	string(WhenDelayedIgnore),
}

// WhenDelayedNames returns a list of possible string values of WhenDelayed.
func WhenDelayedNames() []string {
	tmp := make([]string, len(_WhenDelayedNames))
	copy(tmp, _WhenDelayedNames)
	return tmp
}

// WhenDelayedValues returns a list of the values for WhenDelayed
func WhenDelayedValues() []WhenDelayed {
	return []WhenDelayed{
		WhenDelayedCountAsGood,
		WhenDelayedCountAsBad,
		WhenDelayedIgnore,
	}
}

// String implements the Stringer interface.
func (x WhenDelayed) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x WhenDelayed) IsValid() bool {
	_, err := ParseWhenDelayed(string(x))
	return err == nil
}

var _WhenDelayedValue = map[string]WhenDelayed{
	"CountAsGood": WhenDelayedCountAsGood,
	"countasgood": WhenDelayedCountAsGood,
	"CountAsBad":  WhenDelayedCountAsBad,
	"countasbad":  WhenDelayedCountAsBad,
	"Ignore":      WhenDelayedIgnore,
	"ignore":      WhenDelayedIgnore,
}

// ParseWhenDelayed attempts to convert a string to a WhenDelayed.
func ParseWhenDelayed(name string) (WhenDelayed, error) {
	if x, ok := _WhenDelayedValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _WhenDelayedValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return WhenDelayed(""), fmt.Errorf("%s is %w", name, ErrInvalidWhenDelayed)
}
