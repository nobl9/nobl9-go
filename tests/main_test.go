//go:build e2e_test

package tests

import (
	"context"
	"fmt"
	"os"
	"testing"
	"time"

	"github.com/nobl9/nobl9-go/manifest"
	"github.com/nobl9/nobl9-go/manifest/v1alpha"
	v1alphaProject "github.com/nobl9/nobl9-go/manifest/v1alpha/project"
	"github.com/nobl9/nobl9-go/sdk"
	e2etestutils2 "github.com/nobl9/nobl9-go/tests/e2etestutils"
)

const defaultProject = "sdk-e2e-default"

var client *sdk.Client

func TestMain(m *testing.M) {
	os.Exit(runTestMain(m))
}

func runTestMain(m *testing.M) int {
	var err error
	config, err := sdk.ReadConfig()
	if err != nil {
		printErrorf("failed to read %T: %v", config, err)
		return 1
	}
	config.Project = defaultProject
	config.Timeout = 1 * time.Minute
	if client, err = sdk.NewClient(config); err != nil {
		printErrorf("failed to create %T: %v", client, err)
		return 1
	}
	org, err := client.GetOrganization(context.Background())
	if err != nil {
		printErrorf("failed to get test organization: %v", err)
		return 1
	}
	fmt.Printf("Running SDK end-to-end tests\nOrganization: %s\nAuth Server: %s\nClient ID: %s\n\n",
		org, client.Config.OktaOrgURL.JoinPath(client.Config.OktaAuthServer), client.Config.ClientID)

	if err = client.Objects().V1().Apply(context.Background(), []manifest.Object{v1alphaProject.New(
		v1alphaProject.Metadata{
			Name:        defaultProject,
			Labels:      v1alpha.Labels{"origin": []string{"sdk-e2e-test"}},
			Annotations: commonAnnotations,
		},
		v1alphaProject.Spec{
			Description: "Object generated by e2e SDK tests. This object is persisted across all tests, do not delete it.",
		},
	)}); err != nil {
		printErrorf("failed to create '%s' Project: %v", defaultProject, err)
		return 1
	}

	e2etestutils2.Setup(e2etestutils2.Config{
		ToolName: "SDK",
		Client:   client,
	})
	defer e2etestutils2.Cleanup()

	return m.Run()
}

func printErrorf(format string, a ...any) {
	fmt.Fprintf(os.Stderr, format+"\n", a...)
}
