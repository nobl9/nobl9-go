//go:build e2e_test

package tests

import (
	"context"
	"encoding/json"
	"fmt"
	"os"
	"regexp"
	"sync/atomic"
	"testing"
	"time"

	"github.com/stretchr/testify/require"

	"github.com/nobl9/nobl9-go/manifest"
	"github.com/nobl9/nobl9-go/manifest/v1alpha"
	"github.com/nobl9/nobl9-go/sdk"
)

var client *sdk.Client

func TestMain(m *testing.M) {
	var err error
	if client, err = sdk.DefaultClient(); err != nil {
		fmt.Fprintf(os.Stderr, "failed to create %T: %v\n", client, err)
		os.Exit(1)
	}
	os.Exit(m.Run())
}

const objectDescription = "Object generated by e2e SDK tests"

var commonAnnotations = v1alpha.MetadataAnnotations{"origin": "sdk-e2e-test"}

var (
	timeRFC3339Regexp = regexp.MustCompile(`\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z`)
	userIDRegexp      = regexp.MustCompile(`[a-zA-Z0-9]{20}`)
)

type objectsEqualityAssertFunc[T manifest.Object] func(t *testing.T, expected, actual T)

func assertSubset[T manifest.Object](t *testing.T, actual, expected []T, f objectsEqualityAssertFunc[T]) {
	t.Helper()
	for i := range expected {
		found := false
		for j := range actual {
			if actual[j].GetName() == expected[i].GetName() {
				f(t, expected[i], actual[j])
				found = true
				break
			}
		}
		if !found {
			t.Errorf("expected object %s not found in the actual list", expected[i].GetName())
		}
	}
}

func deepCopyObject[T manifest.Object](t *testing.T, object T) T {
	t.Helper()
	data, err := json.Marshal(object)
	require.NoError(t, err)
	var copied T
	err = json.Unmarshal(data, &copied)
	require.NoError(t, err)
	return copied
}

func v1Apply[T manifest.Object](t *testing.T, ctx context.Context, inputs []T) {
	t.Helper()
	objects := make([]manifest.Object, 0, len(inputs))
	for _, input := range inputs {
		objects = append(objects, input)
	}
	err := client.Objects().V1().Apply(ctx, objects)
	require.NoError(t, err)
}

func v1Delete[T manifest.Object](t *testing.T, ctx context.Context, inputs []T) {
	t.Helper()
	objects := make([]manifest.Object, 0, len(inputs))
	for _, input := range inputs {
		objects = append(objects, input)
	}
	err := client.Objects().V1().Delete(ctx, objects)
	require.NoError(t, err)
}

var objectsCounter = atomic.Int64{}

// generateName generates a unique name for the test object.
func generateName() string {
	return fmt.Sprintf("sdk-e2e-%d-%d", objectsCounter.Add(1), time.Now().UnixNano())
}

// annotateLabels adds origin label to the provided labels,
// so it's easier to locate the leftovers from these tests.
func annotateLabels(labels v1alpha.Labels) v1alpha.Labels {
	labels["origin"] = []string{"sdk-e2e-test"}
	return labels
}
