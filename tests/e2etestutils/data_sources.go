package e2etestutils

import (
	"fmt"
	"strings"
	"sync"
	"testing"

	"github.com/nobl9/nobl9-go/manifest"
	"github.com/nobl9/nobl9-go/manifest/v1alpha"
	v1alphaAgent "github.com/nobl9/nobl9-go/manifest/v1alpha/agent"
	v1alphaDirect "github.com/nobl9/nobl9-go/manifest/v1alpha/direct"
	v1alphaProject "github.com/nobl9/nobl9-go/manifest/v1alpha/project"
)

// DataSourcesProject is the Project which contains all the static Data Sources
// shared between different tests and their runs.
const DataSourcesProject = "e2e-data-sources"

const objectPersistedDescription = "Object generated by end-to-end tests." +
	" This object is persisted across all tests, do not delete it."

// ProvisionStaticAgent applies and returns [v1alphaAgent.Agent] of the given [v1alpha.DataSourceType].
// The Agent is meant to be persisted across test runs.
func ProvisionStaticAgent(t *testing.T, typ v1alpha.DataSourceType) v1alphaAgent.Agent {
	t.Helper()

	agent := getStaticAgent(t, typ)
	if cached, ok := staticDataSourcesCache.Load(agent.GetName()); ok {
		return cached.(v1alphaAgent.Agent)
	}
	V1Apply(t, []manifest.Object{getDataSourcesProject(), agent})
	staticDataSourcesCache.Store(agent.GetName(), agent)
	return agent
}

// ProvisionStaticDirect applies and returns [v1alphaDirect.Direct] of the given [v1alpha.DataSourceType].
// The Direct is meant to be persisted across test runs.
func ProvisionStaticDirect(t *testing.T, typ v1alpha.DataSourceType) v1alphaDirect.Direct {
	t.Helper()
	if !v1alphaDirect.IsValidDirectType(typ) {
		t.Fatalf("Direct does not support %[1]s %[1]T", typ)
	}
	direct := getStaticDirect(t, typ)
	if cached, ok := staticDataSourcesCache.Load(direct.GetName()); ok {
		return cached.(v1alphaDirect.Direct)
	}
	V1Apply(t, []manifest.Object{getDataSourcesProject(), direct})
	staticDataSourcesCache.Store(direct.GetName(), direct)
	return direct
}

// staticDataSourcesCache is used to store already applied static data sources.
// This way we do not execute unnecessary 'apply' requests.
var staticDataSourcesCache sync.Map

func getStaticAgent(t *testing.T, typ v1alpha.DataSourceType) v1alphaAgent.Agent {
	t.Helper()

	example := GetExample(t, manifest.KindAgent, FilterExamplesByDataSourceType(typ))
	agent := example.GetObject().(v1alphaAgent.Agent)
	agent.Metadata = v1alphaAgent.Metadata{
		Name:    fmt.Sprintf("e2e-agent-%s", strings.ToLower(typ.String())),
		Project: DataSourcesProject,
	}
	agent.Spec.Description = objectPersistedDescription

	return agent
}

func getStaticDirect(t *testing.T, typ v1alpha.DataSourceType) v1alphaDirect.Direct {
	t.Helper()

	example := GetExample(t, manifest.KindDirect, FilterExamplesByDataSourceType(typ))
	direct := example.GetObject().(v1alphaDirect.Direct)
	direct.Metadata = v1alphaDirect.Metadata{
		Name:    fmt.Sprintf("e2e-direct-%s", strings.ToLower(typ.String())),
		Project: DataSourcesProject,
	}
	direct.Spec.Description = objectPersistedDescription

	return direct
}

func getDataSourcesProject() v1alphaProject.Project {
	return v1alphaProject.New(
		v1alphaProject.Metadata{
			Name:        DataSourcesProject,
			DisplayName: "End-to-end Data Sources",
			Labels: v1alpha.Labels{
				"origin": []string{"e2e-test"},
			},
		},
		v1alphaProject.Spec{
			Description: "This Project contains a collection of all Agent and Direct types used for end-to-end tests." +
				" This Project along with all its associated objects is meant to be persisted across test runs" +
				" in order to speed up the execution of other tests, primarily targeting SLOs.",
		},
	)
}
