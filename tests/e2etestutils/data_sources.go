package e2etestutils

import (
	"fmt"
	"strings"
	"testing"

	"github.com/nobl9/nobl9-go/manifest"
	"github.com/nobl9/nobl9-go/manifest/v1alpha"
	v1alphaAgent "github.com/nobl9/nobl9-go/manifest/v1alpha/agent"
	v1alphaDirect "github.com/nobl9/nobl9-go/manifest/v1alpha/direct"
	v1alphaProject "github.com/nobl9/nobl9-go/manifest/v1alpha/project"
)

// DataSourcesProject is the Project which contains all the static Data Sources
// shared between different tests and their runs.
const DataSourcesProject = "e2e-data-sources"

const objectPersistedDescription = "Object generated by end-to-end tests." +
	" This object is persisted across all tests, do not delete it."

// StaticAgents applies and returns every type of [v1alphaAgent.Agent].
// These Agents are meant to be persisted across test runs.
func StaticAgents(t *testing.T) []manifest.Object {
	t.Helper()

	agentTypes := v1alpha.DataSourceTypeValues()
	objects := make([]manifest.Object, 0, len(agentTypes)+1)
	for _, typ := range agentTypes {
		objects = append(objects, getStaticAgent(t, typ))
	}

	V1Apply(t, []manifest.Object{getDataSourcesProject()})
	V1ApplyBatch(t, objects, 1)
	return objects
}

// StaticAgent applies and returns [v1alphaAgent.Agent] of the given [v1alpha.DataSourceType].
// The Agent is meant to be persisted across test runs.
func StaticAgent(t *testing.T, typ v1alpha.DataSourceType) v1alphaAgent.Agent {
	t.Helper()
	agent := getStaticAgent(t, typ)
	V1Apply(t, []manifest.Object{getDataSourcesProject(), agent})
	return agent
}

// StaticDirects applies and returns every type of [v1alphaDirect.Direct].
// These Directs are meant to be persisted across test runs.
func StaticDirects(t *testing.T) []manifest.Object {
	t.Helper()

	dataSourceTypes := v1alpha.DataSourceTypeValues()
	objects := make([]manifest.Object, 0, len(dataSourceTypes))
	for _, typ := range dataSourceTypes {
		if !v1alphaDirect.IsValidDirectType(typ) {
			continue
		}
		objects = append(objects, getStaticDirect(t, typ))
	}

	V1Apply(t, []manifest.Object{getDataSourcesProject()})
	V1Apply(t, objects)
	return objects
}

// StaticDirect applies and returns [v1alphaDirect.Direct] of the given [v1alpha.DataSourceType].
// The Direct is meant to be persisted across test runs.
func StaticDirect(t *testing.T, typ v1alpha.DataSourceType) v1alphaDirect.Direct {
	t.Helper()
	if !v1alphaDirect.IsValidDirectType(typ) {
		t.Fatalf("Direct does not support %[1]s %[1]T", typ)
	}
	direct := getStaticDirect(t, typ)
	V1Apply(t, []manifest.Object{getDataSourcesProject(), direct})
	return direct
}

func getStaticAgent(t *testing.T, typ v1alpha.DataSourceType) v1alphaAgent.Agent {
	t.Helper()

	example := GetExample(t, manifest.KindAgent, FilterExamplesByDataSourceType(typ))
	agent := example.GetObject().(v1alphaAgent.Agent)
	agent.Metadata = v1alphaAgent.Metadata{
		Name:    fmt.Sprintf("e2e-agent-%s", strings.ToLower(typ.String())),
		Project: DataSourcesProject,
	}
	agent.Spec.Description = objectPersistedDescription

	return agent
}

func getStaticDirect(t *testing.T, typ v1alpha.DataSourceType) v1alphaDirect.Direct {
	t.Helper()

	example := GetExample(t, manifest.KindDirect, FilterExamplesByDataSourceType(typ))
	direct := example.GetObject().(v1alphaDirect.Direct)
	direct.Metadata = v1alphaDirect.Metadata{
		Name:    fmt.Sprintf("e2e-direct-%s", strings.ToLower(typ.String())),
		Project: DataSourcesProject,
	}
	direct.Spec.Description = objectPersistedDescription

	return direct
}

func getDataSourcesProject() v1alphaProject.Project {
	return v1alphaProject.New(
		v1alphaProject.Metadata{
			Name:        DataSourcesProject,
			DisplayName: "End-to-end Data Sources",
			Labels: v1alpha.Labels{
				"origin": []string{"e2e-test"},
			},
		},
		v1alphaProject.Spec{
			Description: "This Project contains a collection of all Agent and Direct types used for end-to-end tests." +
				" This Project along with all its associated objects is meant to be persisted across test runs" +
				" in order to speed up the execution of other tests, primarily targeting SLOs.",
		},
	)
}
