// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nobl9/nobl9-go/sdk/endpoints/objects/v1 (interfaces: Endpoints)
//
// Generated by this command:
//
//	mockgen -destination mocks/objects_v1.go -package mocks -mock_names Endpoints=MockObjectsV1Endpoints -typed github.com/nobl9/nobl9-go/sdk/endpoints/objects/v1 Endpoints
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	url "net/url"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	manifest "github.com/nobl9/nobl9-go/manifest"
	agent "github.com/nobl9/nobl9-go/manifest/v1alpha/agent"
	alertmethod "github.com/nobl9/nobl9-go/manifest/v1alpha/alertmethod"
	alertpolicy "github.com/nobl9/nobl9-go/manifest/v1alpha/alertpolicy"
	alertsilence "github.com/nobl9/nobl9-go/manifest/v1alpha/alertsilence"
	annotation "github.com/nobl9/nobl9-go/manifest/v1alpha/annotation"
	budgetadjustment "github.com/nobl9/nobl9-go/manifest/v1alpha/budgetadjustment"
	dataexport "github.com/nobl9/nobl9-go/manifest/v1alpha/dataexport"
	direct "github.com/nobl9/nobl9-go/manifest/v1alpha/direct"
	project "github.com/nobl9/nobl9-go/manifest/v1alpha/project"
	report "github.com/nobl9/nobl9-go/manifest/v1alpha/report"
	rolebinding "github.com/nobl9/nobl9-go/manifest/v1alpha/rolebinding"
	service "github.com/nobl9/nobl9-go/manifest/v1alpha/service"
	slo "github.com/nobl9/nobl9-go/manifest/v1alpha/slo"
	usergroup "github.com/nobl9/nobl9-go/manifest/v1alpha/usergroup"
	v1 "github.com/nobl9/nobl9-go/sdk/endpoints/objects/v1"
)

// MockObjectsV1Endpoints is a mock of Endpoints interface.
type MockObjectsV1Endpoints struct {
	ctrl     *gomock.Controller
	recorder *MockObjectsV1EndpointsMockRecorder
}

// MockObjectsV1EndpointsMockRecorder is the mock recorder for MockObjectsV1Endpoints.
type MockObjectsV1EndpointsMockRecorder struct {
	mock *MockObjectsV1Endpoints
}

// NewMockObjectsV1Endpoints creates a new mock instance.
func NewMockObjectsV1Endpoints(ctrl *gomock.Controller) *MockObjectsV1Endpoints {
	mock := &MockObjectsV1Endpoints{ctrl: ctrl}
	mock.recorder = &MockObjectsV1EndpointsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectsV1Endpoints) EXPECT() *MockObjectsV1EndpointsMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockObjectsV1Endpoints) Apply(arg0 context.Context, arg1 []manifest.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockObjectsV1EndpointsMockRecorder) Apply(arg0, arg1 any) *MockObjectsV1EndpointsApplyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockObjectsV1Endpoints)(nil).Apply), arg0, arg1)
	return &MockObjectsV1EndpointsApplyCall{Call: call}
}

// MockObjectsV1EndpointsApplyCall wrap *gomock.Call
type MockObjectsV1EndpointsApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectsV1EndpointsApplyCall) Return(arg0 error) *MockObjectsV1EndpointsApplyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectsV1EndpointsApplyCall) Do(f func(context.Context, []manifest.Object) error) *MockObjectsV1EndpointsApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectsV1EndpointsApplyCall) DoAndReturn(f func(context.Context, []manifest.Object) error) *MockObjectsV1EndpointsApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockObjectsV1Endpoints) Delete(arg0 context.Context, arg1 []manifest.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockObjectsV1EndpointsMockRecorder) Delete(arg0, arg1 any) *MockObjectsV1EndpointsDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockObjectsV1Endpoints)(nil).Delete), arg0, arg1)
	return &MockObjectsV1EndpointsDeleteCall{Call: call}
}

// MockObjectsV1EndpointsDeleteCall wrap *gomock.Call
type MockObjectsV1EndpointsDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectsV1EndpointsDeleteCall) Return(arg0 error) *MockObjectsV1EndpointsDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectsV1EndpointsDeleteCall) Do(f func(context.Context, []manifest.Object) error) *MockObjectsV1EndpointsDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectsV1EndpointsDeleteCall) DoAndReturn(f func(context.Context, []manifest.Object) error) *MockObjectsV1EndpointsDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteByName mocks base method.
func (m *MockObjectsV1Endpoints) DeleteByName(arg0 context.Context, arg1 manifest.Kind, arg2 string, arg3 ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteByName", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByName indicates an expected call of DeleteByName.
func (mr *MockObjectsV1EndpointsMockRecorder) DeleteByName(arg0, arg1, arg2 any, arg3 ...any) *MockObjectsV1EndpointsDeleteByNameCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByName", reflect.TypeOf((*MockObjectsV1Endpoints)(nil).DeleteByName), varargs...)
	return &MockObjectsV1EndpointsDeleteByNameCall{Call: call}
}

// MockObjectsV1EndpointsDeleteByNameCall wrap *gomock.Call
type MockObjectsV1EndpointsDeleteByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectsV1EndpointsDeleteByNameCall) Return(arg0 error) *MockObjectsV1EndpointsDeleteByNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectsV1EndpointsDeleteByNameCall) Do(f func(context.Context, manifest.Kind, string, ...string) error) *MockObjectsV1EndpointsDeleteByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectsV1EndpointsDeleteByNameCall) DoAndReturn(f func(context.Context, manifest.Kind, string, ...string) error) *MockObjectsV1EndpointsDeleteByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockObjectsV1Endpoints) Get(arg0 context.Context, arg1 manifest.Kind, arg2 http.Header, arg3 url.Values) ([]manifest.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]manifest.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockObjectsV1EndpointsMockRecorder) Get(arg0, arg1, arg2, arg3 any) *MockObjectsV1EndpointsGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockObjectsV1Endpoints)(nil).Get), arg0, arg1, arg2, arg3)
	return &MockObjectsV1EndpointsGetCall{Call: call}
}

// MockObjectsV1EndpointsGetCall wrap *gomock.Call
type MockObjectsV1EndpointsGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectsV1EndpointsGetCall) Return(arg0 []manifest.Object, arg1 error) *MockObjectsV1EndpointsGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectsV1EndpointsGetCall) Do(f func(context.Context, manifest.Kind, http.Header, url.Values) ([]manifest.Object, error)) *MockObjectsV1EndpointsGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectsV1EndpointsGetCall) DoAndReturn(f func(context.Context, manifest.Kind, http.Header, url.Values) ([]manifest.Object, error)) *MockObjectsV1EndpointsGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAlerts mocks base method.
func (m *MockObjectsV1Endpoints) GetAlerts(arg0 context.Context, arg1 http.Header, arg2 url.Values) ([]manifest.Object, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlerts", arg0, arg1, arg2)
	ret0, _ := ret[0].([]manifest.Object)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAlerts indicates an expected call of GetAlerts.
func (mr *MockObjectsV1EndpointsMockRecorder) GetAlerts(arg0, arg1, arg2 any) *MockObjectsV1EndpointsGetAlertsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlerts", reflect.TypeOf((*MockObjectsV1Endpoints)(nil).GetAlerts), arg0, arg1, arg2)
	return &MockObjectsV1EndpointsGetAlertsCall{Call: call}
}

// MockObjectsV1EndpointsGetAlertsCall wrap *gomock.Call
type MockObjectsV1EndpointsGetAlertsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectsV1EndpointsGetAlertsCall) Return(arg0 []manifest.Object, arg1 int, arg2 error) *MockObjectsV1EndpointsGetAlertsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectsV1EndpointsGetAlertsCall) Do(f func(context.Context, http.Header, url.Values) ([]manifest.Object, int, error)) *MockObjectsV1EndpointsGetAlertsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectsV1EndpointsGetAlertsCall) DoAndReturn(f func(context.Context, http.Header, url.Values) ([]manifest.Object, int, error)) *MockObjectsV1EndpointsGetAlertsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBudgetAdjustments mocks base method.
func (m *MockObjectsV1Endpoints) GetBudgetAdjustments(arg0 context.Context, arg1 v1.GetBudgetAdjustmentRequest) ([]budgetadjustment.BudgetAdjustment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBudgetAdjustments", arg0, arg1)
	ret0, _ := ret[0].([]budgetadjustment.BudgetAdjustment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBudgetAdjustments indicates an expected call of GetBudgetAdjustments.
func (mr *MockObjectsV1EndpointsMockRecorder) GetBudgetAdjustments(arg0, arg1 any) *MockObjectsV1EndpointsGetBudgetAdjustmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBudgetAdjustments", reflect.TypeOf((*MockObjectsV1Endpoints)(nil).GetBudgetAdjustments), arg0, arg1)
	return &MockObjectsV1EndpointsGetBudgetAdjustmentsCall{Call: call}
}

// MockObjectsV1EndpointsGetBudgetAdjustmentsCall wrap *gomock.Call
type MockObjectsV1EndpointsGetBudgetAdjustmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectsV1EndpointsGetBudgetAdjustmentsCall) Return(arg0 []budgetadjustment.BudgetAdjustment, arg1 error) *MockObjectsV1EndpointsGetBudgetAdjustmentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectsV1EndpointsGetBudgetAdjustmentsCall) Do(f func(context.Context, v1.GetBudgetAdjustmentRequest) ([]budgetadjustment.BudgetAdjustment, error)) *MockObjectsV1EndpointsGetBudgetAdjustmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectsV1EndpointsGetBudgetAdjustmentsCall) DoAndReturn(f func(context.Context, v1.GetBudgetAdjustmentRequest) ([]budgetadjustment.BudgetAdjustment, error)) *MockObjectsV1EndpointsGetBudgetAdjustmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetReports mocks base method.
func (m *MockObjectsV1Endpoints) GetReports(arg0 context.Context, arg1 v1.GetReportsRequest) ([]report.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReports", arg0, arg1)
	ret0, _ := ret[0].([]report.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReports indicates an expected call of GetReports.
func (mr *MockObjectsV1EndpointsMockRecorder) GetReports(arg0, arg1 any) *MockObjectsV1EndpointsGetReportsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReports", reflect.TypeOf((*MockObjectsV1Endpoints)(nil).GetReports), arg0, arg1)
	return &MockObjectsV1EndpointsGetReportsCall{Call: call}
}

// MockObjectsV1EndpointsGetReportsCall wrap *gomock.Call
type MockObjectsV1EndpointsGetReportsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectsV1EndpointsGetReportsCall) Return(arg0 []report.Report, arg1 error) *MockObjectsV1EndpointsGetReportsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectsV1EndpointsGetReportsCall) Do(f func(context.Context, v1.GetReportsRequest) ([]report.Report, error)) *MockObjectsV1EndpointsGetReportsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectsV1EndpointsGetReportsCall) DoAndReturn(f func(context.Context, v1.GetReportsRequest) ([]report.Report, error)) *MockObjectsV1EndpointsGetReportsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetV1alphaAgents mocks base method.
func (m *MockObjectsV1Endpoints) GetV1alphaAgents(arg0 context.Context, arg1 v1.GetAgentsRequest) ([]agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1alphaAgents", arg0, arg1)
	ret0, _ := ret[0].([]agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1alphaAgents indicates an expected call of GetV1alphaAgents.
func (mr *MockObjectsV1EndpointsMockRecorder) GetV1alphaAgents(arg0, arg1 any) *MockObjectsV1EndpointsGetV1alphaAgentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1alphaAgents", reflect.TypeOf((*MockObjectsV1Endpoints)(nil).GetV1alphaAgents), arg0, arg1)
	return &MockObjectsV1EndpointsGetV1alphaAgentsCall{Call: call}
}

// MockObjectsV1EndpointsGetV1alphaAgentsCall wrap *gomock.Call
type MockObjectsV1EndpointsGetV1alphaAgentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectsV1EndpointsGetV1alphaAgentsCall) Return(arg0 []agent.Agent, arg1 error) *MockObjectsV1EndpointsGetV1alphaAgentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectsV1EndpointsGetV1alphaAgentsCall) Do(f func(context.Context, v1.GetAgentsRequest) ([]agent.Agent, error)) *MockObjectsV1EndpointsGetV1alphaAgentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectsV1EndpointsGetV1alphaAgentsCall) DoAndReturn(f func(context.Context, v1.GetAgentsRequest) ([]agent.Agent, error)) *MockObjectsV1EndpointsGetV1alphaAgentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetV1alphaAlertMethods mocks base method.
func (m *MockObjectsV1Endpoints) GetV1alphaAlertMethods(arg0 context.Context, arg1 v1.GetAlertMethodsRequest) ([]alertmethod.AlertMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1alphaAlertMethods", arg0, arg1)
	ret0, _ := ret[0].([]alertmethod.AlertMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1alphaAlertMethods indicates an expected call of GetV1alphaAlertMethods.
func (mr *MockObjectsV1EndpointsMockRecorder) GetV1alphaAlertMethods(arg0, arg1 any) *MockObjectsV1EndpointsGetV1alphaAlertMethodsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1alphaAlertMethods", reflect.TypeOf((*MockObjectsV1Endpoints)(nil).GetV1alphaAlertMethods), arg0, arg1)
	return &MockObjectsV1EndpointsGetV1alphaAlertMethodsCall{Call: call}
}

// MockObjectsV1EndpointsGetV1alphaAlertMethodsCall wrap *gomock.Call
type MockObjectsV1EndpointsGetV1alphaAlertMethodsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectsV1EndpointsGetV1alphaAlertMethodsCall) Return(arg0 []alertmethod.AlertMethod, arg1 error) *MockObjectsV1EndpointsGetV1alphaAlertMethodsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectsV1EndpointsGetV1alphaAlertMethodsCall) Do(f func(context.Context, v1.GetAlertMethodsRequest) ([]alertmethod.AlertMethod, error)) *MockObjectsV1EndpointsGetV1alphaAlertMethodsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectsV1EndpointsGetV1alphaAlertMethodsCall) DoAndReturn(f func(context.Context, v1.GetAlertMethodsRequest) ([]alertmethod.AlertMethod, error)) *MockObjectsV1EndpointsGetV1alphaAlertMethodsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetV1alphaAlertPolicies mocks base method.
func (m *MockObjectsV1Endpoints) GetV1alphaAlertPolicies(arg0 context.Context, arg1 v1.GetAlertPolicyRequest) ([]alertpolicy.AlertPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1alphaAlertPolicies", arg0, arg1)
	ret0, _ := ret[0].([]alertpolicy.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1alphaAlertPolicies indicates an expected call of GetV1alphaAlertPolicies.
func (mr *MockObjectsV1EndpointsMockRecorder) GetV1alphaAlertPolicies(arg0, arg1 any) *MockObjectsV1EndpointsGetV1alphaAlertPoliciesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1alphaAlertPolicies", reflect.TypeOf((*MockObjectsV1Endpoints)(nil).GetV1alphaAlertPolicies), arg0, arg1)
	return &MockObjectsV1EndpointsGetV1alphaAlertPoliciesCall{Call: call}
}

// MockObjectsV1EndpointsGetV1alphaAlertPoliciesCall wrap *gomock.Call
type MockObjectsV1EndpointsGetV1alphaAlertPoliciesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectsV1EndpointsGetV1alphaAlertPoliciesCall) Return(arg0 []alertpolicy.AlertPolicy, arg1 error) *MockObjectsV1EndpointsGetV1alphaAlertPoliciesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectsV1EndpointsGetV1alphaAlertPoliciesCall) Do(f func(context.Context, v1.GetAlertPolicyRequest) ([]alertpolicy.AlertPolicy, error)) *MockObjectsV1EndpointsGetV1alphaAlertPoliciesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectsV1EndpointsGetV1alphaAlertPoliciesCall) DoAndReturn(f func(context.Context, v1.GetAlertPolicyRequest) ([]alertpolicy.AlertPolicy, error)) *MockObjectsV1EndpointsGetV1alphaAlertPoliciesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetV1alphaAlertSilences mocks base method.
func (m *MockObjectsV1Endpoints) GetV1alphaAlertSilences(arg0 context.Context, arg1 v1.GetAlertSilencesRequest) ([]alertsilence.AlertSilence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1alphaAlertSilences", arg0, arg1)
	ret0, _ := ret[0].([]alertsilence.AlertSilence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1alphaAlertSilences indicates an expected call of GetV1alphaAlertSilences.
func (mr *MockObjectsV1EndpointsMockRecorder) GetV1alphaAlertSilences(arg0, arg1 any) *MockObjectsV1EndpointsGetV1alphaAlertSilencesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1alphaAlertSilences", reflect.TypeOf((*MockObjectsV1Endpoints)(nil).GetV1alphaAlertSilences), arg0, arg1)
	return &MockObjectsV1EndpointsGetV1alphaAlertSilencesCall{Call: call}
}

// MockObjectsV1EndpointsGetV1alphaAlertSilencesCall wrap *gomock.Call
type MockObjectsV1EndpointsGetV1alphaAlertSilencesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectsV1EndpointsGetV1alphaAlertSilencesCall) Return(arg0 []alertsilence.AlertSilence, arg1 error) *MockObjectsV1EndpointsGetV1alphaAlertSilencesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectsV1EndpointsGetV1alphaAlertSilencesCall) Do(f func(context.Context, v1.GetAlertSilencesRequest) ([]alertsilence.AlertSilence, error)) *MockObjectsV1EndpointsGetV1alphaAlertSilencesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectsV1EndpointsGetV1alphaAlertSilencesCall) DoAndReturn(f func(context.Context, v1.GetAlertSilencesRequest) ([]alertsilence.AlertSilence, error)) *MockObjectsV1EndpointsGetV1alphaAlertSilencesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetV1alphaAlerts mocks base method.
func (m *MockObjectsV1Endpoints) GetV1alphaAlerts(arg0 context.Context, arg1 v1.GetAlertsRequest) (*v1.GetAlertsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1alphaAlerts", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetAlertsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1alphaAlerts indicates an expected call of GetV1alphaAlerts.
func (mr *MockObjectsV1EndpointsMockRecorder) GetV1alphaAlerts(arg0, arg1 any) *MockObjectsV1EndpointsGetV1alphaAlertsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1alphaAlerts", reflect.TypeOf((*MockObjectsV1Endpoints)(nil).GetV1alphaAlerts), arg0, arg1)
	return &MockObjectsV1EndpointsGetV1alphaAlertsCall{Call: call}
}

// MockObjectsV1EndpointsGetV1alphaAlertsCall wrap *gomock.Call
type MockObjectsV1EndpointsGetV1alphaAlertsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectsV1EndpointsGetV1alphaAlertsCall) Return(arg0 *v1.GetAlertsResponse, arg1 error) *MockObjectsV1EndpointsGetV1alphaAlertsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectsV1EndpointsGetV1alphaAlertsCall) Do(f func(context.Context, v1.GetAlertsRequest) (*v1.GetAlertsResponse, error)) *MockObjectsV1EndpointsGetV1alphaAlertsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectsV1EndpointsGetV1alphaAlertsCall) DoAndReturn(f func(context.Context, v1.GetAlertsRequest) (*v1.GetAlertsResponse, error)) *MockObjectsV1EndpointsGetV1alphaAlertsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetV1alphaAnnotations mocks base method.
func (m *MockObjectsV1Endpoints) GetV1alphaAnnotations(arg0 context.Context, arg1 v1.GetAnnotationsRequest) ([]annotation.Annotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1alphaAnnotations", arg0, arg1)
	ret0, _ := ret[0].([]annotation.Annotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1alphaAnnotations indicates an expected call of GetV1alphaAnnotations.
func (mr *MockObjectsV1EndpointsMockRecorder) GetV1alphaAnnotations(arg0, arg1 any) *MockObjectsV1EndpointsGetV1alphaAnnotationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1alphaAnnotations", reflect.TypeOf((*MockObjectsV1Endpoints)(nil).GetV1alphaAnnotations), arg0, arg1)
	return &MockObjectsV1EndpointsGetV1alphaAnnotationsCall{Call: call}
}

// MockObjectsV1EndpointsGetV1alphaAnnotationsCall wrap *gomock.Call
type MockObjectsV1EndpointsGetV1alphaAnnotationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectsV1EndpointsGetV1alphaAnnotationsCall) Return(arg0 []annotation.Annotation, arg1 error) *MockObjectsV1EndpointsGetV1alphaAnnotationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectsV1EndpointsGetV1alphaAnnotationsCall) Do(f func(context.Context, v1.GetAnnotationsRequest) ([]annotation.Annotation, error)) *MockObjectsV1EndpointsGetV1alphaAnnotationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectsV1EndpointsGetV1alphaAnnotationsCall) DoAndReturn(f func(context.Context, v1.GetAnnotationsRequest) ([]annotation.Annotation, error)) *MockObjectsV1EndpointsGetV1alphaAnnotationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetV1alphaDataExports mocks base method.
func (m *MockObjectsV1Endpoints) GetV1alphaDataExports(arg0 context.Context, arg1 v1.GetDataExportsRequest) ([]dataexport.DataExport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1alphaDataExports", arg0, arg1)
	ret0, _ := ret[0].([]dataexport.DataExport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1alphaDataExports indicates an expected call of GetV1alphaDataExports.
func (mr *MockObjectsV1EndpointsMockRecorder) GetV1alphaDataExports(arg0, arg1 any) *MockObjectsV1EndpointsGetV1alphaDataExportsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1alphaDataExports", reflect.TypeOf((*MockObjectsV1Endpoints)(nil).GetV1alphaDataExports), arg0, arg1)
	return &MockObjectsV1EndpointsGetV1alphaDataExportsCall{Call: call}
}

// MockObjectsV1EndpointsGetV1alphaDataExportsCall wrap *gomock.Call
type MockObjectsV1EndpointsGetV1alphaDataExportsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectsV1EndpointsGetV1alphaDataExportsCall) Return(arg0 []dataexport.DataExport, arg1 error) *MockObjectsV1EndpointsGetV1alphaDataExportsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectsV1EndpointsGetV1alphaDataExportsCall) Do(f func(context.Context, v1.GetDataExportsRequest) ([]dataexport.DataExport, error)) *MockObjectsV1EndpointsGetV1alphaDataExportsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectsV1EndpointsGetV1alphaDataExportsCall) DoAndReturn(f func(context.Context, v1.GetDataExportsRequest) ([]dataexport.DataExport, error)) *MockObjectsV1EndpointsGetV1alphaDataExportsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetV1alphaDirects mocks base method.
func (m *MockObjectsV1Endpoints) GetV1alphaDirects(arg0 context.Context, arg1 v1.GetDirectsRequest) ([]direct.Direct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1alphaDirects", arg0, arg1)
	ret0, _ := ret[0].([]direct.Direct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1alphaDirects indicates an expected call of GetV1alphaDirects.
func (mr *MockObjectsV1EndpointsMockRecorder) GetV1alphaDirects(arg0, arg1 any) *MockObjectsV1EndpointsGetV1alphaDirectsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1alphaDirects", reflect.TypeOf((*MockObjectsV1Endpoints)(nil).GetV1alphaDirects), arg0, arg1)
	return &MockObjectsV1EndpointsGetV1alphaDirectsCall{Call: call}
}

// MockObjectsV1EndpointsGetV1alphaDirectsCall wrap *gomock.Call
type MockObjectsV1EndpointsGetV1alphaDirectsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectsV1EndpointsGetV1alphaDirectsCall) Return(arg0 []direct.Direct, arg1 error) *MockObjectsV1EndpointsGetV1alphaDirectsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectsV1EndpointsGetV1alphaDirectsCall) Do(f func(context.Context, v1.GetDirectsRequest) ([]direct.Direct, error)) *MockObjectsV1EndpointsGetV1alphaDirectsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectsV1EndpointsGetV1alphaDirectsCall) DoAndReturn(f func(context.Context, v1.GetDirectsRequest) ([]direct.Direct, error)) *MockObjectsV1EndpointsGetV1alphaDirectsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetV1alphaProjects mocks base method.
func (m *MockObjectsV1Endpoints) GetV1alphaProjects(arg0 context.Context, arg1 v1.GetProjectsRequest) ([]project.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1alphaProjects", arg0, arg1)
	ret0, _ := ret[0].([]project.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1alphaProjects indicates an expected call of GetV1alphaProjects.
func (mr *MockObjectsV1EndpointsMockRecorder) GetV1alphaProjects(arg0, arg1 any) *MockObjectsV1EndpointsGetV1alphaProjectsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1alphaProjects", reflect.TypeOf((*MockObjectsV1Endpoints)(nil).GetV1alphaProjects), arg0, arg1)
	return &MockObjectsV1EndpointsGetV1alphaProjectsCall{Call: call}
}

// MockObjectsV1EndpointsGetV1alphaProjectsCall wrap *gomock.Call
type MockObjectsV1EndpointsGetV1alphaProjectsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectsV1EndpointsGetV1alphaProjectsCall) Return(arg0 []project.Project, arg1 error) *MockObjectsV1EndpointsGetV1alphaProjectsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectsV1EndpointsGetV1alphaProjectsCall) Do(f func(context.Context, v1.GetProjectsRequest) ([]project.Project, error)) *MockObjectsV1EndpointsGetV1alphaProjectsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectsV1EndpointsGetV1alphaProjectsCall) DoAndReturn(f func(context.Context, v1.GetProjectsRequest) ([]project.Project, error)) *MockObjectsV1EndpointsGetV1alphaProjectsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetV1alphaRoleBindings mocks base method.
func (m *MockObjectsV1Endpoints) GetV1alphaRoleBindings(arg0 context.Context, arg1 v1.GetRoleBindingsRequest) ([]rolebinding.RoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1alphaRoleBindings", arg0, arg1)
	ret0, _ := ret[0].([]rolebinding.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1alphaRoleBindings indicates an expected call of GetV1alphaRoleBindings.
func (mr *MockObjectsV1EndpointsMockRecorder) GetV1alphaRoleBindings(arg0, arg1 any) *MockObjectsV1EndpointsGetV1alphaRoleBindingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1alphaRoleBindings", reflect.TypeOf((*MockObjectsV1Endpoints)(nil).GetV1alphaRoleBindings), arg0, arg1)
	return &MockObjectsV1EndpointsGetV1alphaRoleBindingsCall{Call: call}
}

// MockObjectsV1EndpointsGetV1alphaRoleBindingsCall wrap *gomock.Call
type MockObjectsV1EndpointsGetV1alphaRoleBindingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectsV1EndpointsGetV1alphaRoleBindingsCall) Return(arg0 []rolebinding.RoleBinding, arg1 error) *MockObjectsV1EndpointsGetV1alphaRoleBindingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectsV1EndpointsGetV1alphaRoleBindingsCall) Do(f func(context.Context, v1.GetRoleBindingsRequest) ([]rolebinding.RoleBinding, error)) *MockObjectsV1EndpointsGetV1alphaRoleBindingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectsV1EndpointsGetV1alphaRoleBindingsCall) DoAndReturn(f func(context.Context, v1.GetRoleBindingsRequest) ([]rolebinding.RoleBinding, error)) *MockObjectsV1EndpointsGetV1alphaRoleBindingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetV1alphaSLOs mocks base method.
func (m *MockObjectsV1Endpoints) GetV1alphaSLOs(arg0 context.Context, arg1 v1.GetSLOsRequest) ([]slo.SLO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1alphaSLOs", arg0, arg1)
	ret0, _ := ret[0].([]slo.SLO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1alphaSLOs indicates an expected call of GetV1alphaSLOs.
func (mr *MockObjectsV1EndpointsMockRecorder) GetV1alphaSLOs(arg0, arg1 any) *MockObjectsV1EndpointsGetV1alphaSLOsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1alphaSLOs", reflect.TypeOf((*MockObjectsV1Endpoints)(nil).GetV1alphaSLOs), arg0, arg1)
	return &MockObjectsV1EndpointsGetV1alphaSLOsCall{Call: call}
}

// MockObjectsV1EndpointsGetV1alphaSLOsCall wrap *gomock.Call
type MockObjectsV1EndpointsGetV1alphaSLOsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectsV1EndpointsGetV1alphaSLOsCall) Return(arg0 []slo.SLO, arg1 error) *MockObjectsV1EndpointsGetV1alphaSLOsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectsV1EndpointsGetV1alphaSLOsCall) Do(f func(context.Context, v1.GetSLOsRequest) ([]slo.SLO, error)) *MockObjectsV1EndpointsGetV1alphaSLOsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectsV1EndpointsGetV1alphaSLOsCall) DoAndReturn(f func(context.Context, v1.GetSLOsRequest) ([]slo.SLO, error)) *MockObjectsV1EndpointsGetV1alphaSLOsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetV1alphaServices mocks base method.
func (m *MockObjectsV1Endpoints) GetV1alphaServices(arg0 context.Context, arg1 v1.GetServicesRequest) ([]service.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1alphaServices", arg0, arg1)
	ret0, _ := ret[0].([]service.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1alphaServices indicates an expected call of GetV1alphaServices.
func (mr *MockObjectsV1EndpointsMockRecorder) GetV1alphaServices(arg0, arg1 any) *MockObjectsV1EndpointsGetV1alphaServicesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1alphaServices", reflect.TypeOf((*MockObjectsV1Endpoints)(nil).GetV1alphaServices), arg0, arg1)
	return &MockObjectsV1EndpointsGetV1alphaServicesCall{Call: call}
}

// MockObjectsV1EndpointsGetV1alphaServicesCall wrap *gomock.Call
type MockObjectsV1EndpointsGetV1alphaServicesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectsV1EndpointsGetV1alphaServicesCall) Return(arg0 []service.Service, arg1 error) *MockObjectsV1EndpointsGetV1alphaServicesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectsV1EndpointsGetV1alphaServicesCall) Do(f func(context.Context, v1.GetServicesRequest) ([]service.Service, error)) *MockObjectsV1EndpointsGetV1alphaServicesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectsV1EndpointsGetV1alphaServicesCall) DoAndReturn(f func(context.Context, v1.GetServicesRequest) ([]service.Service, error)) *MockObjectsV1EndpointsGetV1alphaServicesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetV1alphaUserGroups mocks base method.
func (m *MockObjectsV1Endpoints) GetV1alphaUserGroups(arg0 context.Context, arg1 v1.GetAnnotationsRequest) ([]usergroup.UserGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1alphaUserGroups", arg0, arg1)
	ret0, _ := ret[0].([]usergroup.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1alphaUserGroups indicates an expected call of GetV1alphaUserGroups.
func (mr *MockObjectsV1EndpointsMockRecorder) GetV1alphaUserGroups(arg0, arg1 any) *MockObjectsV1EndpointsGetV1alphaUserGroupsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1alphaUserGroups", reflect.TypeOf((*MockObjectsV1Endpoints)(nil).GetV1alphaUserGroups), arg0, arg1)
	return &MockObjectsV1EndpointsGetV1alphaUserGroupsCall{Call: call}
}

// MockObjectsV1EndpointsGetV1alphaUserGroupsCall wrap *gomock.Call
type MockObjectsV1EndpointsGetV1alphaUserGroupsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectsV1EndpointsGetV1alphaUserGroupsCall) Return(arg0 []usergroup.UserGroup, arg1 error) *MockObjectsV1EndpointsGetV1alphaUserGroupsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectsV1EndpointsGetV1alphaUserGroupsCall) Do(f func(context.Context, v1.GetAnnotationsRequest) ([]usergroup.UserGroup, error)) *MockObjectsV1EndpointsGetV1alphaUserGroupsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectsV1EndpointsGetV1alphaUserGroupsCall) DoAndReturn(f func(context.Context, v1.GetAnnotationsRequest) ([]usergroup.UserGroup, error)) *MockObjectsV1EndpointsGetV1alphaUserGroupsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
