// Code generated by MockGen. DO NOT EDIT.
// SourceSLO: mock_example (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination mocks/client.go -package mocks -typed . Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	objects "github.com/nobl9/nobl9-go/sdk/endpoints/objects"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetOrganization mocks base method.
func (m *MockClient) GetOrganization(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganization", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganization indicates an expected call of GetOrganization.
func (mr *MockClientMockRecorder) GetOrganization(arg0 any) *MockClientGetOrganizationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockClient)(nil).GetOrganization), arg0)
	return &MockClientGetOrganizationCall{Call: call}
}

// MockClientGetOrganizationCall wrap *gomock.Call
type MockClientGetOrganizationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientGetOrganizationCall) Return(arg0 string, arg1 error) *MockClientGetOrganizationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientGetOrganizationCall) Do(f func(context.Context) (string, error)) *MockClientGetOrganizationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientGetOrganizationCall) DoAndReturn(f func(context.Context) (string, error)) *MockClientGetOrganizationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Objects mocks base method.
func (m *MockClient) Objects() objects.Versions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Objects")
	ret0, _ := ret[0].(objects.Versions)
	return ret0
}

// Objects indicates an expected call of Objects.
func (mr *MockClientMockRecorder) Objects() *MockClientObjectsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Objects", reflect.TypeOf((*MockClient)(nil).Objects))
	return &MockClientObjectsCall{Call: call}
}

// MockClientObjectsCall wrap *gomock.Call
type MockClientObjectsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientObjectsCall) Return(arg0 objects.Versions) *MockClientObjectsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientObjectsCall) Do(f func() objects.Versions) *MockClientObjectsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientObjectsCall) DoAndReturn(f func() objects.Versions) *MockClientObjectsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
